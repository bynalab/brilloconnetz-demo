// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'db_models.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:User.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// User TABLE
class TableUser extends SqfEntityTableBase {
  TableUser() {
    // declare properties of EntityTable
    tableName = 'users';
    primaryKeyName = 'userId';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('email', DbType.text, isUnique: true, maxValue: 50),
      SqfEntityFieldBase('phone', DbType.text, isUnique: true, maxValue: 15),
      SqfEntityFieldBase('interests', DbType.text),
      SqfEntityFieldBase('password', DbType.text),
      SqfEntityFieldBase('code', DbType.integer, maxValue: 5),
      SqfEntityFieldBase('isVerified', DbType.bool, defaultValue: false),
      SqfEntityFieldBase('createdAt', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updatedAt', DbType.datetimeUtc,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUser();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class QuickManagerDbModel extends SqfEntityModelProvider {
  QuickManagerDbModel() {
    databaseName = quickManagerDbModel.databaseName;
    password = quickManagerDbModel.password;
    dbVersion = quickManagerDbModel.dbVersion;
    preSaveAction = quickManagerDbModel.preSaveAction;
    logFunction = quickManagerDbModel.logFunction;
    databaseTables = [
      TableUser.getInstance,
    ];

    bundledDatabasePath = quickManagerDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = quickManagerDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region User
class User extends TableBase {
  User(
      {this.userId,
      this.email,
      this.phone,
      this.interests,
      this.password,
      this.code,
      this.isVerified,
      this.createdAt,
      this.updatedAt}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  User.withFields(
      this.userId,
      this.email,
      this.phone,
      this.interests,
      this.password,
      this.code,
      this.isVerified,
      this.createdAt,
      this.updatedAt) {
    _setDefaultValues();
  }
  User.withId(
      this.userId,
      this.email,
      this.phone,
      this.interests,
      this.password,
      this.code,
      this.isVerified,
      this.createdAt,
      this.updatedAt) {
    _setDefaultValues();
  }
  // fromMap v2.0
  User.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    userId = o['userId'].toString();
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['phone'] != null) {
      phone = o['phone'].toString();
    }
    if (o['interests'] != null) {
      interests = o['interests'].toString();
    }
    if (o['password'] != null) {
      password = o['password'].toString();
    }
    if (o['code'] != null) {
      code = int.tryParse(o['code'].toString());
    }
    if (o['isVerified'] != null) {
      isVerified = o['isVerified'].toString() == '1' ||
          o['isVerified'].toString() == 'true';
    }
    if (o['createdAt'] != null) {
      createdAt = int.tryParse(o['createdAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['createdAt'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['createdAt'].toString());
    }
    if (o['updatedAt'] != null) {
      updatedAt = int.tryParse(o['updatedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updatedAt'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['updatedAt'].toString());
    }

    isSaved = true;
  }
  // FIELDS (User)
  String? userId;
  String? email;
  String? phone;
  String? interests;
  String? password;
  int? code;
  bool? isVerified;
  DateTime? createdAt;
  DateTime? updatedAt;
  bool? isSaved;
  // end FIELDS (User)

  static const bool _softDeleteActivated = false;
  UserManager? __mnUser;

  UserManager get _mnUser {
    return __mnUser = __mnUser ?? UserManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['userId'] = userId;
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (interests != null || !forView) {
      map['interests'] = interests;
    }
    if (password != null || !forView) {
      map['password'] = password;
    }
    if (code != null || !forView) {
      map['code'] = code;
    }
    if (isVerified != null) {
      map['isVerified'] = forQuery ? (isVerified! ? 1 : 0) : isVerified;
    } else if (isVerified != null || !forView) {
      map['isVerified'] = null;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toUtc().toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toUtc().toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['userId'] = userId;
    if (email != null || !forView) {
      map['email'] = email;
    }
    if (phone != null || !forView) {
      map['phone'] = phone;
    }
    if (interests != null || !forView) {
      map['interests'] = interests;
    }
    if (password != null || !forView) {
      map['password'] = password;
    }
    if (code != null || !forView) {
      map['code'] = code;
    }
    if (isVerified != null) {
      map['isVerified'] = forQuery ? (isVerified! ? 1 : 0) : isVerified;
    } else if (isVerified != null || !forView) {
      map['isVerified'] = null;
    }
    if (createdAt != null) {
      map['createdAt'] = forJson
          ? createdAt!.toUtc().toString()
          : forQuery
              ? createdAt!.millisecondsSinceEpoch
              : createdAt;
    } else if (createdAt != null || !forView) {
      map['createdAt'] = null;
    }
    if (updatedAt != null) {
      map['updatedAt'] = forJson
          ? updatedAt!.toUtc().toString()
          : forQuery
              ? updatedAt!.millisecondsSinceEpoch
              : updatedAt;
    } else if (updatedAt != null || !forView) {
      map['updatedAt'] = null;
    }

    return map;
  }

  /// This method returns Json String [User]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [User]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      userId,
      email,
      phone,
      interests,
      password,
      code,
      isVerified,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      userId,
      email,
      phone,
      interests,
      password,
      code,
      isVerified,
      createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
      updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<User>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR User.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<User>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <User>[];
    try {
      objList = list
          .map((user) => User.fromMap(user as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR User.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<User>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<User> objList = <User>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = User.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns User by ID if exist, otherwise returns null
  /// Primary Keys: String? userId
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [User] if exist, otherwise returns null
  Future<User?> getById(String? userId,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (userId == null) {
      return null;
    }
    User? obj;
    final data = await _mnUser.getById([userId]);
    if (data.length != 0) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (User) object. If the Primary Key (userId) field is null, returns Error.
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  /// Call the saveAs() method if you do not want to save it when there is another row with the same userId
  /// <returns>Returns BoolResult
  @override
  Future<BoolResult> save({bool ignoreBatch = true}) async {
    final result = BoolResult(success: false);
    try {
      await _mnUser.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO users (userId, email, phone, interests, password, code, isVerified, createdAt, updatedAt)  VALUES (?,?,?,?,?,?,?,?,?)',
          toArgsWithIds(),
          ignoreBatch);
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<User> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<User> users,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await QuickManagerDbModel().batchStart();
    for (final obj in users) {
      await obj.save();
    }
    if (!isStartedBatch) {
      result = await QuickManagerDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns 1
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnUser.rawInsert(
          'INSERT OR REPLACE INTO users (userId, email, phone, interests, password, code, isVerified, createdAt, updatedAt)  VALUES (?,?,?,?,?,?,?,?,?)',
          [
            userId,
            email,
            phone,
            interests,
            password,
            code,
            isVerified,
            createdAt != null ? createdAt!.millisecondsSinceEpoch : null,
            updatedAt != null ? updatedAt!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'User userId=$userId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'User userId=$userId did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'User Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// Deletes User

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete User invoked (userId=$userId)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnUser.delete(
          QueryParams(whereString: 'userId=?', whereArguments: [userId]));
    } else {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'userId=?', whereArguments: [userId]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [User] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  UserFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  UserFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isVerified = isVerified ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      userId = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion user

// region UserField
class UserField extends FilterBase {
  UserField(UserFilterBuilder userFB) : super(userFB);

  @override
  UserFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder isNull() {
    return super.isNull() as UserFilterBuilder;
  }

  @override
  UserFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as UserFilterBuilder;
  }

  @override
  UserFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as UserFilterBuilder;
  }

  @override
  UserField get not {
    return super.not as UserField;
  }
}
// endregion UserField

// region UserFilterBuilder
class UserFilterBuilder extends ConjunctionBase {
  UserFilterBuilder(User obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnUser = obj._mnUser;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  UserManager? _mnUser;

  /// put the sql keyword 'AND'
  @override
  UserFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  UserFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  UserFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  UserFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  UserFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  UserFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  UserFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UserFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UserFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UserFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UserFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  UserField _setField(UserField? field, String colName, DbType dbtype) {
    return UserField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  UserField? _userId;
  UserField get userId {
    return _userId = _setField(_userId, 'userId', DbType.integer);
  }

  UserField? _email;
  UserField get email {
    return _email = _setField(_email, 'email', DbType.text);
  }

  UserField? _phone;
  UserField get phone {
    return _phone = _setField(_phone, 'phone', DbType.text);
  }

  UserField? _interests;
  UserField get interests {
    return _interests = _setField(_interests, 'interests', DbType.text);
  }

  UserField? _password;
  UserField get password {
    return _password = _setField(_password, 'password', DbType.text);
  }

  UserField? _code;
  UserField get code {
    return _code = _setField(_code, 'code', DbType.integer);
  }

  UserField? _isVerified;
  UserField get isVerified {
    return _isVerified = _setField(_isVerified, 'isVerified', DbType.bool);
  }

  UserField? _createdAt;
  UserField get createdAt {
    return _createdAt = _setField(_createdAt, 'createdAt', DbType.datetimeUtc);
  }

  UserField? _updatedAt;
  UserField get updatedAt {
    return _updatedAt = _setField(_updatedAt, 'updatedAt', DbType.datetimeUtc);
  }

  /// Deletes List<User> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnUser!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnUser!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'userId IN (SELECT userId from users ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnUser!.updateBatch(qparams, values);
  }

  /// This method always returns [User] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> User?
  @override
  Future<User?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnUser!.toList(qparams);
    final data = await objFuture;
    User? obj;
    if (data.isNotEmpty) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [User]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> User?
  @override
  Future<User> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        User();
  }

  /// This method returns int. [User]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? userCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final usersFuture = await _mnUser!.toList(qparams);
    final int count = usersFuture[0]['CNT'] as int;
    if (userCount != null) {
      userCount(count);
    }
    return count;
  }

  /// This method returns List<User> [User]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<User>
  @override
  Future<List<User>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<User> usersData = await User.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return usersData;
  }

  /// This method returns Json String [User]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [User]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [User]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnUser!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [User]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `userId` FROM users WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  @override
  Future<List<String>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<String> userIdData = <String>[];
    qparams.selectColumns = ['userId'];
    final userIdFuture = await _mnUser!.toList(qparams);

    final int count = userIdFuture.length;
    for (int i = 0; i < count; i++) {
      userIdData.add(userIdFuture[i]['userId'] as String);
    }
    return userIdData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [User]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnUser!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await User.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnUser!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UserFilterBuilder

// region UserFields
class UserFields {
  static TableField? _fUserId;
  static TableField get userId {
    return _fUserId =
        _fUserId ?? SqlSyntax.setField(_fUserId, 'userid', DbType.integer);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField? _fInterests;
  static TableField get interests {
    return _fInterests = _fInterests ??
        SqlSyntax.setField(_fInterests, 'interests', DbType.text);
  }

  static TableField? _fPassword;
  static TableField get password {
    return _fPassword =
        _fPassword ?? SqlSyntax.setField(_fPassword, 'password', DbType.text);
  }

  static TableField? _fCode;
  static TableField get code {
    return _fCode =
        _fCode ?? SqlSyntax.setField(_fCode, 'code', DbType.integer);
  }

  static TableField? _fIsVerified;
  static TableField get isVerified {
    return _fIsVerified = _fIsVerified ??
        SqlSyntax.setField(_fIsVerified, 'isVerified', DbType.bool);
  }

  static TableField? _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.datetimeUtc);
  }

  static TableField? _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.datetimeUtc);
  }
}
// endregion UserFields

//region UserManager
class UserManager extends SqfEntityProvider {
  UserManager()
      : super(QuickManagerDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'users';
  static const List<String> _primaryKeyList = ['userId'];
  static const String _whereStr = 'userId=?';
}

//endregion UserManager
class QuickManagerDbModelSequenceManager extends SqfEntityProvider {
  QuickManagerDbModelSequenceManager() : super(QuickManagerDbModel());
}
// END OF ENTITIES
